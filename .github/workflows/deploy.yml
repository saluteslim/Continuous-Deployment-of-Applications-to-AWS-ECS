# name: Infrastructure and Container Build

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# env:
#   AWS_REGION: eu-west-2
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   ECR_REPOSITORY: 277285677846.dkr.ecr.eu-west-2.amazonaws.com/flask   # set this to your Amazon ECR repository name
#   ECS_SERVICE: flask_app_demo                 # set this to your Amazon ECS service name
#   ECS_CLUSTER: flask_app_demo                 # set this to your Amazon ECS cluster name
#   ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
#                                                # file, e.g. .aws/task-definition.json
#   CONTAINER_NAME: flask           # set this to the name of the container in the
#                                                # containerDefinitions section of your task definition

# jobs:
#   terraform:
#     name: Terraform
#     runs-on: ubuntu-latest
#     environment: production

#     defaults:
#       run:
#         shell: bash

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: 1.4.6
#           cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#       - name: Terraform Init
#         run: terraform init


#       - name: Terraform Plan
#         run: terraform plan -input=false

#       - name: Terraform Apply
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#         run: terraform apply -auto-approve -input=false

        - name: Terraform Destroy
          if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          run: terraform destroy -auto-approve -input=false

#   build:
#     name: build
#     needs: terraform
#     runs-on: ubuntu-latest
#     environment: production
    

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: eu-west-2

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: 277285677846.dkr.ecr.eu-west-2.amazonaws.com/flask
#           ECR_REPOSITORY: flask
#           IMAGE_TAG: latest
#         run: |
#           docker build -t 277285677846.dkr.ecr.eu-west-2.amazonaws.com/flask:latest ./flask_app
#           docker tag 277285677846.dkr.ecr.eu-west-2.amazonaws.com/flask:latest 277285677846.dkr.ecr.eu-west-2.amazonaws.com/flask:latest
#           docker push 277285677846.dkr.ecr.eu-west-2.amazonaws.com/flask:latest